enum KeyStatus {
  expired
  invalid
  valid
  default
}

enum KeyType {
  stream_xchacha20
  secretstream
  secretbox
  kdf
  generichash
  shorthash
  auth
  hmacsha256
  hmacsha512
  aead_det
  aead_ietf
}

enum FactorStatus {
  verified
  unverified
}

enum FactorType {
  webauthn
  totp
}

enum AalLevel {
  aal3
  aal2
  aal1
}

enum CodeChallengeMethod {
  plain
  s256
}

enum PricingType {
  recurring
  one_time
}

enum PricingPlanInterval {
  year
  month
  week
  day
}

enum SubscriptionStatus {
  unpaid
  past_due
  incomplete_expired
  incomplete
  canceled
  active
  trialing
}

enum EqualityOp {
  in
  gte
  gt
  lte
  lt
  neq
  eq
}

enum Action {
  ERROR
  TRUNCATE
  DELETE
  UPDATE
  INSERT
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Workspace {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  userId        String
  title         String
  iconId        String
  data          String?
  inTrash       String?
  logo          Bytes?
  bannerUrl     String?

  Folders       Folder[] // One-to-many relationship with Folders
  workspaceAccess     WorkspaceAccess[]
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)    // Many-to-one relationship with Folders

  @@map("workspaces")
}

model Folder {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  title         String
  iconId        String
  data          String?
  inTrash       String?
  bannerUrl     String?
  workspaceId   String    // Foreign key field

  // Relations
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade) // Many-to-one relationship with Workspaces
  Files         File[]    // One-to-many relationship with Files

  @@map("folders")
}

model File {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  title         String
  iconId        String
  data          String?
  inTrash       String?
  bannerUrl     String?
  folderId      String    // Foreign key field

  // Relations
  folder        Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade)    // Many-to-one relationship with Folders

  @@map("files")
}

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  verified            Boolean  @default(false)
  verificationToken   String?
  avatarUrl           String?
  fullName            String?
  pwd                 String?
  billingAddress      Json?
  updatedAt           DateTime? @db.Timestamptz
  paymentMethod       Json?
  subscriptions       Subscription[]
  workspaces          Workspace[]
  workspaceAccess     WorkspaceAccess[]
}


model Customer {
  id              String   @id @default(uuid())
  stripeCustomerId String?
}

model Price {
  id            String   @id
  productId     String
  active        Boolean?
  description   String?
  unitAmount    BigInt?
  currency      String?
  type          PricingType?
  interval      PricingPlanInterval?
  intervalCount Int?
  trialPeriodDays Int?
  metadata      Json?
  product       Product @relation(fields: [productId], references: [id])
  subscription  Subscription[]
}

model Product {
  id          String  @id
  active      Boolean?
  name        String?
  description String?
  image       String?
  metadata    Json?
  prices      Price[]
}

model Subscription {
  id                   String   @id
  userId               String
  status               SubscriptionStatus?
  metadata             Json?
  priceId              String?
  quantity             Int?
  cancelAtPeriodEnd    Boolean?
  created              DateTime @default(now()) @db.Timestamptz
  currentPeriodStart   DateTime @default(now()) @db.Timestamptz
  currentPeriodEnd     DateTime @default(now()) @db.Timestamptz
  endedAt              DateTime? @db.Timestamptz
  cancelAt             DateTime? @db.Timestamptz
  canceledAt           DateTime? @db.Timestamptz
  trialStart           DateTime? @db.Timestamptz
  trialEnd             DateTime? @db.Timestamptz
  user                 User     @relation(fields: [userId], references: [id])
  price                Price?   @relation(fields: [priceId], references: [id])
}


enum AccessLevel {
  private
  shared
  collaborated
}

model WorkspaceAccess {
  id          String      @id @default(uuid())
  workspaceId String
  userId      String
  accessLevel AccessLevel

  // Relations
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId]) // Ensure a user can't have duplicate access to the same workspace
}
